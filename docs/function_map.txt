custom_components.securemtr.__init__.async_setup: Set up the securemtr integration.
custom_components.securemtr.__init__.SecuremtrRuntimeData: Track runtime Beanbag backend state for a config entry.
custom_components.securemtr.__init__.SecuremtrController: Represent the discovered Secure Meters controller.
custom_components.securemtr.__init__.async_setup_entry: Set up securemtr from a config entry and schedule backend startup.
custom_components.securemtr.__init__._entry_display_name: Return a non-sensitive identifier for a config entry.
custom_components.securemtr.__init__.async_unload_entry: Unload a securemtr config entry, cancelling tasks and closing the WebSocket.
custom_components.securemtr.__init__._async_start_backend: Authenticate with Beanbag and establish the WebSocket connection.
custom_components.securemtr.__init__._async_refresh_connection: Ensure the Beanbag WebSocket connection is available, reconnecting with stored credentials when required.
custom_components.securemtr.__init__._async_fetch_controller: Retrieve controller metadata via the Beanbag WebSocket.
custom_components.securemtr.__init__._build_controller: Translate metadata and gateway context into a controller object.
custom_components.securemtr.__init__.consumption_metrics: Refresh and persist the latest seven-day consumption metrics in runtime state.
custom_components.securemtr.__init__._normalize_identifier: Return a sanitized identifier candidate when possible.
custom_components.securemtr.__init__.runtime_update_signal: Return the dispatcher signal name for runtime updates.
custom_components.securemtr.__init__.async_dispatch_runtime_update: Notify entities that runtime state has been updated.
custom_components.securemtr.__init__.coerce_end_time: Convert an end-minute payload into an aware datetime.
custom_components.securemtr.config_flow.SecuremtrConfigFlow.async_step_user: Handle the initial user configuration step, enforcing the Secure Controls 12-character password limit, storing the MD5 digest, and assigning a generic entry title.
custom_components.securemtr.beanbag.BeanbagHttpClient.login: Execute the documented Beanbag login flow while emitting sanitized diagnostics and validating the response payload.
custom_components.securemtr.beanbag.BeanbagHttpClient._parse_gateway: Translate raw gateway payload into an object.
custom_components.securemtr.beanbag.BeanbagWebSocketClient.connect: Open the Beanbag WebSocket using the authenticated session with sanitized handshake logging.
custom_components.securemtr.beanbag.BeanbagWebSocketClient._build_ws_url: Construct the WebSocket URL from the REST base.
custom_components.securemtr.beanbag.BeanbagBackend.login: Authenticate with the Beanbag REST API and record sanitized tracing logs.
custom_components.securemtr.beanbag.BeanbagBackend.connect_websocket: Connect to the Beanbag WebSocket using the login session while preserving credential privacy in logs.
custom_components.securemtr.beanbag.BeanbagBackend.login_and_connect: Run the login flow and immediately open the WebSocket with high-level handshake logging.
custom_components.securemtr.beanbag.BeanbagBackend.read_zone_topology: Retrieve the configured immersion zones for the gateway.
custom_components.securemtr.beanbag.BeanbagBackend.sync_gateway_clock: Align the controller clock with the current epoch timestamp.
custom_components.securemtr.beanbag.BeanbagBackend.read_schedule_overview: Fetch the summary of configured boost and heating schedules.
custom_components.securemtr.beanbag.BeanbagBackend.read_device_metadata: Fetch the controller metadata block via the WebSocket.
custom_components.securemtr.beanbag.BeanbagBackend.read_device_configuration: Fetch controller configuration parameters via the WebSocket.
custom_components.securemtr.beanbag.BeanbagBackend.read_live_state: Read the live state blocks and derive the primary power flag.
custom_components.securemtr.beanbag.BeanbagBackend.read_energy_history: Fetch the aggregated seven-day energy metrics for the controller and normalise the response.
custom_components.securemtr.beanbag.BeanbagBackend.read_weekly_program: Return the parsed weekly program for the selected zone.
custom_components.securemtr.beanbag.BeanbagBackend.turn_controller_on: Send the WebSocket command to enable the primary immersion.
custom_components.securemtr.beanbag.BeanbagBackend.turn_controller_off: Send the WebSocket command to disable the primary immersion.
custom_components.securemtr.beanbag.BeanbagBackend.set_timed_boost_enabled: Toggle the timed boost feature flag via the Beanbag WebSocket.
custom_components.securemtr.beanbag.BeanbagBackend.start_timed_boost: Activate a timed boost run for the provided duration.
custom_components.securemtr.beanbag.BeanbagBackend.stop_timed_boost: Cancel any active timed boost run.
custom_components.securemtr.beanbag.BeanbagBackend.write_weekly_program: Send the weekly program update for the selected zone.
custom_components.securemtr.beanbag.BeanbagBackend._set_primary_mode: Issue the documented primary mode write command.
custom_components.securemtr.beanbag.BeanbagBackend._extract_primary_power: Return the primary power boolean from a live state payload.
custom_components.securemtr.beanbag.BeanbagBackend._extract_timed_boost_flag: Return the timed boost enable flag from a live state payload.
custom_components.securemtr.beanbag.BeanbagBackend._extract_timed_boost_active: Return whether a timed boost run is active.
custom_components.securemtr.beanbag.BeanbagBackend._extract_timed_boost_end_minute: Return the minute-of-day value for the boost end time.
custom_components.securemtr.beanbag.BeanbagBackend._extract_boost_items: Extract the boost block item list from a live state payload.
custom_components.securemtr.beanbag.BeanbagBackend._resolve_program_index: Translate the textual zone selector into the Beanbag index.
custom_components.securemtr.beanbag.BeanbagBackend._parse_weekly_program: Convert the Beanbag wire format into a weekly program structure.
custom_components.securemtr.beanbag.BeanbagBackend._parse_flat_program: Interpret a flattened seven-day transition list.
custom_components.securemtr.beanbag.BeanbagBackend._parse_daily_program: Derive a DailyProgram object from transition entries.
custom_components.securemtr.beanbag.BeanbagBackend._build_weekly_program_payload: Translate a WeeklyProgram into the Beanbag wire structure.
custom_components.securemtr.beanbag._coerce_energy: Convert a Beanbag energy value into kilowatt-hours.
custom_components.securemtr.beanbag._coerce_minutes: Validate and normalise a Beanbag minute aggregate.
custom_components.securemtr.beanbag.BeanbagBackend._send_request: Send a request frame and await the matching response payload.
custom_components.securemtr.beanbag.DailyProgram.__post_init__: Validate and normalise minute triplets.
custom_components.securemtr.beanbag.DailyProgram._coerce_triplet: Normalise a 3-slot minute collection.
custom_components.securemtr.switch.async_setup_entry: Set up Secure Meters switch entities for a config entry.
custom_components.securemtr.switch._SecuremtrBaseSwitch: Provide shared behaviour for Secure Meters switch entities.
custom_components.securemtr.switch.SecuremtrPowerSwitch.is_on: Return whether the controller reports the primary power as on.
custom_components.securemtr.switch.SecuremtrPowerSwitch.async_turn_on: Send an on command to the Secure Meters controller.
custom_components.securemtr.switch.SecuremtrPowerSwitch.async_turn_off: Send an off command to the Secure Meters controller.
custom_components.securemtr.switch.SecuremtrPowerSwitch._async_set_power_state: Drive the backend to the requested primary power state.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch.is_on: Return whether timed boost is currently enabled.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch.async_turn_on: Enable the timed boost feature in the backend.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch.async_turn_off: Disable the timed boost feature in the backend.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch._async_set_timed_boost: Drive the backend to the requested timed boost state.
custom_components.securemtr.button._SecuremtrBaseButton: Provide shared behaviour for Secure Meters button entities.
custom_components.securemtr.button.SecuremtrTimedBoostButton.async_press: Send the timed boost start command for the configured duration.
custom_components.securemtr.button.SecuremtrCancelBoostButton.available: Only expose the button while a timed boost is active.
custom_components.securemtr.button.SecuremtrCancelBoostButton.async_press: Send the timed boost stop command.
custom_components.securemtr.button.SecuremtrConsumptionMetricsButton: Trigger a manual refresh of Secure Meters consumption metrics.
custom_components.securemtr.button.SecuremtrConsumptionMetricsButton.async_press: Trigger an on-demand refresh of consumption metrics.
custom_components.securemtr.button.SecuremtrLogWeeklyScheduleButton: Read and log the configured weekly schedules.
custom_components.securemtr.button.SecuremtrLogWeeklyScheduleButton.async_press: Fetch the weekly programs for both zones and emit them to the log.
custom_components.securemtr.button.SecuremtrLogWeeklyScheduleButton._format_program_summary: Convert a weekly program into a human-readable dictionary.
custom_components.securemtr.button.SecuremtrLogWeeklyScheduleButton._format_transitions: Translate minute offsets into HH:MM strings.
custom_components.securemtr.binary_sensor.async_setup_entry: Set up the Secure Meters boost binary sensor.
custom_components.securemtr.binary_sensor._SecuremtrBaseBinarySensor: Provide shared behaviour for Secure Meters binary sensors.
custom_components.securemtr.binary_sensor.SecuremtrBoostActiveBinarySensor.is_on: Return whether the timed boost is active.
custom_components.securemtr.sensor.async_setup_entry: Set up the Secure Meters timed boost sensors.
custom_components.securemtr.sensor._SecuremtrBaseSensor: Provide shared behaviour for Secure Meters sensors.
custom_components.securemtr.sensor.SecuremtrBoostEndsSensor.native_value: Return the boost end timestamp when active.
custom_components.securemtr.entity.slugify_identifier: Convert a controller identifier into a slug for unique IDs.
custom_components.securemtr.entity.build_device_info: Construct device registry metadata for the provided controller.
custom_components.securemtr.button.async_setup_entry: Set up Secure Meters button entities for a config entry.
custom_components.securemtr.beanbag.BeanbagEnergySample: Hold a single energy history sample reported by Beanbag.
custom_components.securemtr.utils.EnergyCalibration: Describe energy calibration parameters.
custom_components.securemtr.utils.to_local: Convert a timestamp into an aware datetime in the provided timezone.
custom_components.securemtr.utils.report_day_for_sample: Return the local calendar day represented by a consumption sample.
custom_components.securemtr.utils.safe_anchor_datetime: Return an aware datetime within the requested day even across DST shifts.
custom_components.securemtr.utils.calibrate_energy_scale: Return calibration data describing how to interpret device energy.
custom_components.securemtr.utils.energy_from_row: Compute energy for a row using calibration or fallback duration power.
custom_components.securemtr.utils.cumulative_update: Return the updated cumulative value from the provided delta.
