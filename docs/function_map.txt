custom_components.securemtr.__init__.async_setup: Set up the securemtr integration.
custom_components.securemtr.__init__.SecuremtrRuntimeData: Track runtime Beanbag backend state for a config entry.
custom_components.securemtr.__init__.SecuremtrController: Represent the discovered Secure Meters controller.
custom_components.securemtr.__init__.async_setup_entry: Set up securemtr from a config entry and schedule backend startup.
custom_components.securemtr.__init__._entry_display_name: Return a non-sensitive identifier for a config entry.
custom_components.securemtr.__init__.async_unload_entry: Unload a securemtr config entry, cancelling tasks and closing the WebSocket.
custom_components.securemtr.__init__._async_start_backend: Authenticate with Beanbag and establish the WebSocket connection.
custom_components.securemtr.__init__._async_fetch_controller: Retrieve controller metadata via the Beanbag WebSocket.
custom_components.securemtr.__init__._build_controller: Translate metadata and gateway context into a controller object.
custom_components.securemtr.__init__._normalize_identifier: Return a sanitized identifier candidate when possible.
custom_components.securemtr.config_flow.SecuremtrConfigFlow.async_step_user: Handle the initial user configuration step, enforcing the Secure Controls 12-character password limit, storing the MD5 digest, and assigning a generic entry title.
custom_components.securemtr.beanbag.BeanbagHttpClient.login: Execute the documented Beanbag login flow while emitting sanitized diagnostics and validating the response payload.
custom_components.securemtr.beanbag.BeanbagHttpClient._parse_gateway: Translate raw gateway payload into an object.
custom_components.securemtr.beanbag.BeanbagWebSocketClient.connect: Open the Beanbag WebSocket using the authenticated session with sanitized handshake logging.
custom_components.securemtr.beanbag.BeanbagWebSocketClient._build_ws_url: Construct the WebSocket URL from the REST base.
custom_components.securemtr.beanbag.BeanbagBackend.login: Authenticate with the Beanbag REST API and record sanitized tracing logs.
custom_components.securemtr.beanbag.BeanbagBackend.connect_websocket: Connect to the Beanbag WebSocket using the login session while preserving credential privacy in logs.
custom_components.securemtr.beanbag.BeanbagBackend.login_and_connect: Run the login flow and immediately open the WebSocket with high-level handshake logging.
custom_components.securemtr.beanbag.BeanbagBackend.read_zone_topology: Retrieve the configured immersion zones for the gateway.
custom_components.securemtr.beanbag.BeanbagBackend.sync_gateway_clock: Align the controller clock with the current epoch timestamp.
custom_components.securemtr.beanbag.BeanbagBackend.read_schedule_overview: Fetch the summary of configured boost and heating schedules.
custom_components.securemtr.beanbag.BeanbagBackend.read_device_metadata: Fetch the controller metadata block via the WebSocket.
custom_components.securemtr.beanbag.BeanbagBackend.read_device_configuration: Fetch controller configuration parameters via the WebSocket.
custom_components.securemtr.beanbag.BeanbagBackend.read_live_state: Read the live state blocks and derive the primary power flag.
custom_components.securemtr.beanbag.BeanbagBackend.read_weekly_program: Return the parsed weekly program for the selected zone.
custom_components.securemtr.beanbag.BeanbagBackend.turn_controller_on: Send the WebSocket command to enable the primary immersion.
custom_components.securemtr.beanbag.BeanbagBackend.turn_controller_off: Send the WebSocket command to disable the primary immersion.
custom_components.securemtr.beanbag.BeanbagBackend.set_timed_boost_enabled: Toggle the timed boost feature flag via the Beanbag WebSocket.
custom_components.securemtr.beanbag.BeanbagBackend.write_weekly_program: Send the weekly program update for the selected zone.
custom_components.securemtr.beanbag.BeanbagBackend._set_primary_mode: Issue the documented primary mode write command.
custom_components.securemtr.beanbag.BeanbagBackend._extract_primary_power: Return the primary power boolean from a live state payload.
custom_components.securemtr.beanbag.BeanbagBackend._extract_timed_boost_flag: Return the timed boost enable flag from a live state payload.
custom_components.securemtr.beanbag.BeanbagBackend._resolve_program_index: Translate the textual zone selector into the Beanbag index.
custom_components.securemtr.beanbag.BeanbagBackend._parse_weekly_program: Convert the Beanbag wire format into a weekly program structure.
custom_components.securemtr.beanbag.BeanbagBackend._parse_flat_program: Interpret a flattened seven-day transition list.
custom_components.securemtr.beanbag.BeanbagBackend._parse_daily_program: Derive a DailyProgram object from transition entries.
custom_components.securemtr.beanbag.BeanbagBackend._build_weekly_program_payload: Translate a WeeklyProgram into the Beanbag wire structure.
custom_components.securemtr.beanbag.BeanbagBackend._send_request: Send a request frame and await the matching response payload.
custom_components.securemtr.beanbag.DailyProgram.__post_init__: Validate and normalise minute triplets.
custom_components.securemtr.beanbag.DailyProgram._coerce_triplet: Normalise a 3-slot minute collection.
custom_components.securemtr.switch.async_setup_entry: Set up Secure Meters switch entities for a config entry.
custom_components.securemtr.switch._SecuremtrBaseSwitch: Provide shared behaviour for Secure Meters switch entities.
custom_components.securemtr.switch.SecuremtrPowerSwitch.is_on: Return whether the controller reports the primary power as on.
custom_components.securemtr.switch.SecuremtrPowerSwitch.async_turn_on: Send an on command to the Secure Meters controller.
custom_components.securemtr.switch.SecuremtrPowerSwitch.async_turn_off: Send an off command to the Secure Meters controller.
custom_components.securemtr.switch.SecuremtrPowerSwitch._async_set_power_state: Drive the backend to the requested primary power state.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch.is_on: Return whether timed boost is currently enabled.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch.async_turn_on: Enable the timed boost feature in the backend.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch.async_turn_off: Disable the timed boost feature in the backend.
custom_components.securemtr.switch.SecuremtrTimedBoostSwitch._async_set_timed_boost: Drive the backend to the requested timed boost state.
custom_components.securemtr.switch._slugify_identifier: Convert the controller identifier into a slug suitable for unique IDs.
custom_components.securemtr.switch._build_device_info: Construct device registry metadata for the provided controller.
